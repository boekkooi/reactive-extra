// Generated by CoffeeScript 1.6.3
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  this.ReactiveDictionary = (function(_super) {
    __extends(ReactiveDictionary, _super);

    function ReactiveDictionary() {
      this._definePrivateProperty('_itemsKeyDep', new Deps.Dependency());
      this._definePrivateProperty('_itemsValueDep', new Deps.Dependency());
      ReactiveDictionary.__super__.constructor.apply(this, arguments);
    }

    ReactiveDictionary.prototype.add = function(key, value) {
      if (__indexOf.call(this, key) >= 0) {
        throw 'An element with Key ' + key + ' already exists.';
      }
      return this.defineProperty(key, value);
    };

    ReactiveDictionary.prototype.remove = function(key) {
      return this.undefineProperty(key);
    };

    ReactiveDictionary.prototype.clear = function() {
      var deps, self;
      self = this;
      deps = this._itemsDeps;
      _.each(this._items, function(v, prop) {
        return delete self[prop];
      });
      this._items = {};
      this._itemsDeps = {};
      _.invoke(deps, 'changed');
      this._itemsKeyDep.changed();
      return this._itemsValueDep.changed();
    };

    ReactiveDictionary.prototype.count = function() {
      this._itemsKeyDep.depend();
      return _.size(this._items);
    };

    ReactiveDictionary.prototype.keys = function() {
      this._itemsKeyDep.depend();
      return _.keys(this._items);
    };

    ReactiveDictionary.prototype.values = function() {
      this._itemsValueDep.depend();
      return _.values(this._items);
    };

    ReactiveDictionary.prototype.contains = function(key) {
      if (_.has(this._items, key)) {
        this._propertyGet(key);
        return true;
      }
      this._itemsKeyDep.depend();
      return false;
    };

    ReactiveDictionary.prototype.containsValue = function(value) {
      var key, val, _ref;
      _ref = this._items;
      for (key in _ref) {
        val = _ref[key];
        if (!(_.has(this._items, key) && _.isEqual(val, value))) {
          continue;
        }
        this._propertyGet(key);
        return true;
      }
      this._itemsValueDep.depend();
      return false;
    };

    ReactiveDictionary.prototype.defineProperty = function() {
      var rtn;
      rtn = ReactiveDictionary.__super__.defineProperty.apply(this, arguments);
      this._itemsKeyDep.changed();
      this._itemsValueDep.changed();
      return rtn;
    };

    ReactiveDictionary.prototype.undefineProperty = function() {
      var rtn;
      rtn = ReactiveDictionary.__super__.undefineProperty.apply(this, arguments);
      this._itemsKeyDep.changed();
      this._itemsValueDep.changed();
      return rtn;
    };

    ReactiveDictionary.prototype._propertySet = function() {
      var rtn;
      rtn = ReactiveDictionary.__super__._propertySet.apply(this, arguments);
      this._itemsValueDep.changed();
      return rtn;
    };

    ReactiveDictionary.prototype.clone = function() {
      return new ReactiveDictionary(_.clone(this._items));
    };

    ReactiveDictionary.prototype.equals = function(obj) {
      return (obj != null) && obj instanceof ReactiveDictionary && _.isEqual(obj._items, this._items);
    };

    ReactiveDictionary.prototype.typeName = function() {
      return 'reactive-dictionary';
    };

    return ReactiveDictionary;

  })(ReactiveObject);

  EJSON.addType('reactive-dictionary', function(jsonObj) {
    return new ReactiveDictionary(jsonObj);
  });

}).call(this);
